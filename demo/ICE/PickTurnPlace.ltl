NAME : PickTurnPlace;

CONTRACT Recipe:
    input boolean variable pick_exec;
    input boolean variable turn_exec;
    input boolean variable place_exec;

    output boolean variable req_pick;
    output boolean variable req_turn;
    output boolean variable req_place;

    output boolean variable pick_done;
    output boolean variable turn_done;
    output boolean variable place_done;

    Assumptions:
        ~pick_exec /\ ~turn_exec /\ ~place_exec;
        G F(pick_exec);
        G F(turn_exec);
        G F(place_exec);

    Guarantees:
        ~pick_done /\ ~turn_done /\ ~place_done;

        G(pick_exec -> X(pick_done));
        G(pick_done -> X(pick_done));
        G(~pick_done /\ ~pick_exec -> X(~pick_done));

        G(turn_exec -> X(turn_done));
        G(turn_done -> X(turn_done));
        G(~turn_done /\ ~turn_exec -> X(~turn_done));

        G(place_exec -> X(place_done));
        G(place_done -> X(place_done));
        G(~place_done /\ ~place_exec -> X(~place_done));

        G(~pick_done -> X(req_pick & ~req_turn & ~req_place));
        G((pick_done /\ ~turn_done) -> X(~req_pick & req_turn & ~req_place));
        G((pick_done /\ turn_done /\ ~place_done) -> X(~req_pick & ~req_turn & req_place));

        G F(pick_done /\ turn_done /\ place_done);

CONTRACT Coordinator:
    input boolean variable req_pick;
    input boolean variable req_turn;
    input boolean variable req_place;

    output boolean variable pick_exec;
    output boolean variable turn_exec;
    output boolean variable place_exec;

    input boolean variable picked;
    input boolean variable turned;
    input boolean variable placed;

    output boolean variable cmd_pick;
    output boolean variable cmd_turn;
    output boolean variable cmd_place;
    output boolean variable cmd_none;

    input boolean variable grip;

    Assumptions:
        !req_pick;
        !req_turn;
        !req_place;

    Guarantees:
        cmd_none;

        G(cmd_none-> ~(cmd_pick | cmd_turn | cmd_place));
        G((req_pick /\ ~grip) -> X(cmd_pick));
        G((req_turn /\ grip) -> X(cmd_turn));
        G((req_place /\ grip) -> X(cmd_place));
        G(picked -> pick_exec);
        G(turned -> turn_exec);
        G(placed -> place_exec);
        G F(pick_exec);
        G F(turn_exec);
        G F(place_exec);

CONTRACT Turn:
    input boolean variable cmd_turn;
    output boolean variable turned;
    output boolean variable turn_requested;

    Assumptions:
        ~cmd_turn;

    Guarantees:
        ~turned /\ ~turn_requested;
        G(~turn_requested -> ~turned);
        [   ](turn_requested -> X(turn_requested));
        G(turned -> X(turned));
        G(cmd_turn -> X(turn_requested));
        G(turn_requested -> X(turned));

CONTRACT Pick:
    input boolean variable cmd_pick;
    output boolean variable picked;
    output boolean variable pick_requested;
    output boolean variable grip;

    Assumptions:
        ~cmd_pick;

    Guarantees:
        ~picked /\ ~pick_requested /\ ~grip;
        G(~pick_requested -> ~picked);
        G(pick_requested -> X(pick_requested));
        G(picked -> X(picked));
        G(cmd_pick -> X(pick_requested));
        G(pick_requested -> X(picked));
        G(~picked -> ~grip);
        G(picked -> grip);
        
CONTRACT Place:
    input boolean variable cmd_place;
    output boolean variable placed;
    output boolean variable place_requested;

    Assumptions:
        ~cmd_place;

    Guarantees:
        ~placed /\ ~place_requested;
        G(~place_requested -> ~placed);
        G(place_requested -> X(place_requested));
        G(placed -> X(placed));
        G(cmd_place -> X(place_requested));
        G(place_requested -> X(placed));
